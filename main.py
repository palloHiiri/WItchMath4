import numpy as np
import matplotlib.pyplot as plt
import os

def linear_approximation(x, y):
    A = np.vstack([x, np.ones(len(x))]).T
    a, b = np.linalg.lstsq(A, y, rcond=None)[0]
    phi = lambda x_: a * x_ + b
    return phi, (a, b)

def quadratic_approximation(x, y):
    A = np.vstack([x**2, x, np.ones(len(x))]).T
    a, b, c = np.linalg.lstsq(A, y, rcond=None)[0]
    phi = lambda x_: a * x_**2 + b * x_ + c
    return phi, (a, b, c)

def cubic_approximation(x, y):
    A = np.vstack([x**3, x**2, x, np.ones(len(x))]).T
    a, b, c, d = np.linalg.lstsq(A, y, rcond=None)[0]
    phi = lambda x_: a * x_**3 + b * x_**2 + c * x_ + d
    return phi, (a, b, c, d)

def exponential_approximation(x, y):
    if np.any(y <= 0):
        raise ValueError("y –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å > 0 –¥–ª—è —ç–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–π –∞–ø–ø—Ä–æ–∫—Å–∏–º–∞—Ü–∏–∏.")
    log_y = np.log(y)
    A = np.vstack([x, np.ones(len(x))]).T
    a, ln_b = np.linalg.lstsq(A, log_y, rcond=None)[0]
    b = np.exp(ln_b)
    phi = lambda x_: b * np.exp(a * x_)
    return phi, (a, b)

def logarithmic_approximation(x, y):
    if np.any(x <= 0):
        raise ValueError("x –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å > 0 –¥–ª—è –ª–æ–≥–∞—Ä–∏—Ñ–º–∏—á–µ—Å–∫–æ–π –∞–ø–ø—Ä–æ–∫—Å–∏–º–∞—Ü–∏–∏.")
    log_x = np.log(x)
    A = np.vstack([log_x, np.ones(len(x))]).T
    a, b = np.linalg.lstsq(A, y, rcond=None)[0]
    phi = lambda x_: a * np.log(np.clip(x_, 1e-10, None)) + b
    return phi, (a, b)

def power_approximation(x, y):
    if np.any(x <= 0) or np.any(y <= 0):
        raise ValueError("x –∏ y –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å > 0 –¥–ª—è —Å—Ç–µ–ø–µ–Ω–Ω–æ–π –∞–ø–ø—Ä–æ–∫—Å–∏–º–∞—Ü–∏–∏.")
    log_x = np.log(x)
    log_y = np.log(y)
    b, ln_a = np.linalg.lstsq(np.vstack([log_x, np.ones(len(x))]).T, log_y, rcond=None)[0]
    a = np.exp(ln_a)
    phi = lambda x_: a * (np.clip(x_, 1e-10, None)**b)
    return phi, (a, b)

# === –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ ===
def calculate_sse(phi, x, y):
    return sum((phi(xi) - yi) ** 2 for xi, yi in zip(x, y))

def calculate_sigma(phi, x, y):
    return np.sqrt(calculate_sse(phi, x, y) / len(x))

def correlation_coefficient(x, y):
    return np.corrcoef(x, y)[0, 1]

def coefficient_of_determination(phi, x, y):
    y_mean = np.mean(y)
    sst = sum((yi - y_mean) ** 2 for yi in y)
    sse = calculate_sse(phi, x, y)
    return 1 - sse / sst if sst != 0 else 0

# === –ß—Ç–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö ===
def load_data():
    print("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö:")
    print("1. –í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é")
    print("2. –ó–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ —Ñ–∞–π–ª–∞")

    choice = input("–í–∞—à –≤—ã–±–æ—Ä: ").strip()
    if choice == "1":
        n = int(input("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ—á–µ–∫ (–æ—Ç 8 –¥–æ 12): "))
        if not (8 <= n <= 12):
            raise ValueError("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ—á–µ–∫ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 8 –¥–æ 12.")
        x = list(map(float, input(f"–í–≤–µ–¥–∏—Ç–µ {n} –∑–Ω–∞—á–µ–Ω–∏–π x —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª: ").split()))
        y = list(map(float, input(f"–í–≤–µ–¥–∏—Ç–µ {n} –∑–Ω–∞—á–µ–Ω–∏–π y —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª: ").split()))
        return np.array(x), np.array(y)
    elif choice == "2":
        path = input("–í–≤–µ–¥–∏—Ç–µ –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É (—Ñ–æ—Ä–º–∞—Ç: x1 y1\nx2 y2...): ")
        if not os.path.exists(path):
            raise FileNotFoundError("–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        data = np.loadtxt(path)
        x, y = data[:, 0], data[:, 1]
        if not (8 <= len(x) <= 12):
            raise ValueError("–ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ—á–µ–∫ –≤ —Ñ–∞–π–ª–µ.")
        return x, y
    else:
        raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä.")

# === –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≤—ã–≤–æ–¥ ===
def format_function(name, coeffs, sigma, r2, sse, corr=None):
    print("=" * 50)
    print(f"–ê–ø–ø—Ä–æ–∫—Å–∏–º–∏—Ä—É—é—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è: {name}")
    if name == "–õ–∏–Ω–µ–π–Ω–∞—è":
        print(f"–§—É–Ω–∫—Ü–∏—è: œÜ(x) = {coeffs[0]:.3f}x + {coeffs[1]:.3f}")
        print(f"–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ –ü–∏—Ä—Å–æ–Ω–∞: r = {corr:.3f}")
    elif name == "–ü–æ–ª–∏–Ω–æ–º–∏–Ω–∞–ª—å–Ω–∞—è 2-–π —Å—Ç–µ–ø–µ–Ω–∏":
        print(f"–§—É–Ω–∫—Ü–∏—è: œÜ(x) = {coeffs[0]:.3f}x¬≤ + {coeffs[1]:.3f}x + {coeffs[2]:.3f}")
    elif name == "–ü–æ–ª–∏–Ω–æ–º–∏–Ω–∞–ª—å–Ω–∞—è 3-–π —Å—Ç–µ–ø–µ–Ω–∏":
        print(f"–§—É–Ω–∫—Ü–∏—è: œÜ(x) = {coeffs[0]:.3f}x¬≥ + {coeffs[1]:.3f}x¬≤ + {coeffs[2]:.3f}x + {coeffs[3]:.3f}")
    elif name == "–≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è":
        print(f"–§—É–Ω–∫—Ü–∏—è: œÜ(x) = {coeffs[1]:.3f} * e^({coeffs[0]:.3f}x)")
    elif name == "–õ–æ–≥–∞—Ä–∏—Ñ–º–∏—á–µ—Å–∫–∞—è":
        print(f"–§—É–Ω–∫—Ü–∏—è: œÜ(x) = {coeffs[0]:.3f} * ln(x) + {coeffs[1]:.3f}")
    elif name == "–°—Ç–µ–ø–µ–Ω–Ω–∞—è":
        print(f"–§—É–Ω–∫—Ü–∏—è: œÜ(x) = {coeffs[0]:.3f} * x^{coeffs[1]:.3f}")
    print(f"–°—Ä–µ–¥–Ω–µ–∫–≤–∞–¥—Ä–∞—Ç–∏—á–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ: œÉ = {sigma:.3f}")
    print(f"–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –¥–µ—Ç–µ—Ä–º–∏–Ω–∞—Ü–∏–∏: R¬≤ = {r2:.3f}")
    print(f"–ú–µ—Ä–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è: S = {sse:.3f}")
    print("=" * 50)

# === –ì—Ä–∞—Ñ–∏–∫ ===
def plot_all_functions(x, y, functions):
    x_plot = np.linspace(min(x) - 0.5, max(x) + 0.5, 500)
    plt.figure(figsize=(12, 6))
    plt.scatter(x, y, color='black', label='–ò—Å—Ö–æ–¥–Ω—ã–µ —Ç–æ—á–∫–∏')
    for name, phi, _ in functions:
        plt.plot(x_plot, [phi(xi) for xi in x_plot], label=name)
    plt.grid(True)
    plt.legend()
    plt.title('–ì—Ä–∞—Ñ–∏–∫–∏ –∞–ø–ø—Ä–æ–∫—Å–∏–º–∞—Ü–∏–π')
    plt.xlabel('x')
    plt.ylabel('œÜ(x)')
    plt.show()

# === –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ ===
def main():
    try:
        x, y = load_data()
        models = [
            ("–õ–∏–Ω–µ–π–Ω–∞—è", linear_approximation),
            ("–ü–æ–ª–∏–Ω–æ–º–∏–Ω–∞–ª—å–Ω–∞—è 2-–π —Å—Ç–µ–ø–µ–Ω–∏", quadratic_approximation),
            ("–ü–æ–ª–∏–Ω–æ–º–∏–Ω–∞–ª—å–Ω–∞—è 3-–π —Å—Ç–µ–ø–µ–Ω–∏", cubic_approximation),
            ("–≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è", exponential_approximation),
            ("–õ–æ–≥–∞—Ä–∏—Ñ–º–∏—á–µ—Å–∫–∞—è", logarithmic_approximation),
            ("–°—Ç–µ–ø–µ–Ω–Ω–∞—è", power_approximation),
        ]
        results = []

        for name, func in models:
            try:
                phi, coeffs = func(x, y)
                sigma = calculate_sigma(phi, x, y)
                r2 = coefficient_of_determination(phi, x, y)
                sse = calculate_sse(phi, x, y)
                corr = correlation_coefficient(x, y) if name == "–õ–∏–Ω–µ–π–Ω–∞—è" else None
                results.append((name, phi, coeffs, sigma, r2, sse, corr))
                format_function(name, coeffs, sigma, r2, sse, corr)
            except Exception as e:
                print(f"[–û—à–∏–±–∫–∞] –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å {name}: {str(e)}")

        best = min(results, key=lambda r: r[3])
        print("\nüèÜ –õ—É—á—à–∞—è –∞–ø–ø—Ä–æ–∫—Å–∏–º–∏—Ä—É—é—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è:", best[0])
        print("=" * 50)

        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –≥—Ä–∞—Ñ–∏–∫
        plot_all_functions(x, y, [(r[0], r[1], r[2]) for r in results])

    except Exception as e:
        print(f"[–û—à–∏–±–∫–∞] {str(e)}")

if __name__ == "__main__":
    main()